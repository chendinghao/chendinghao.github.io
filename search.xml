<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[对区块链的一些思考]]></title>
      <url>%2F2017%2F04%2F25%2F%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E6%80%9D%E8%80%83%2F</url>
      <content type="text"><![CDATA[这两天因为项目的原因自行简单去了解了一下区块链相关知识，现暂时总结如下 1、是什么区块链，简而言之就是去中心化的账本数据库， 不同节点之间建立信任、获取权益的数学算法区块链是一串你使用密码学方法相关联产生的数据块，每一个数据块中包含了一次比特币网络交易的信息，用于验证其信息的有效性和产生下一个区块。 2、区块链的特性其特性：去中心化、去信任、集体维护、可靠数据库、开源、隐私保护 3、如何保证安全性加密算法保证了区块链的安全 4、算法pos算法、pow算法SHA256 求hash值的加密算法原理：将任何一串数据输入到SHA256将得到Hash值，输入相同的字符串会得到相同的值但是输入即使相差一位的字符串所得到的值就可能千差万别，且结果无法预测。正向计算十分容易，但是反向计算则不可能。 5、Merkle Tree一种哈希二叉树，使用它可以快速校验大规模数据的完整性。在比特币网络中，Merkle数被用来归纳一个区块中的所有的交易信息，最终产生这个区块 所有交易信息的一个统一的哈西中，区块中任何一笔交易信息的改变都会使Merkle树改变 工作原理非叶子节点value的计算方法是将该节点的所有子节点进行组合，然后对组合结果进行hash计算所得出的hash value 6、实例应用（1）唯链，初期以奢侈品正品为入口，后期将拓展到供应链管理和商业智能合约领域（2）小蚁众筹 7、需求从需求端看： 金融、医疗、公证、通信、供应链、投票等领域都开始意识到区块链的重要性并开始尝试将技术与现实结合 从投资端看： 区块链的投资资金供给逐步上升，风投的热情高涨，投资密度加大 7、目前我的思考（17/4/24) 时间戳服务器（基于PKI）pos(proof of stake)pow(proof of work) 有很多弊端，比如51%攻击（51%攻击，pos机制能大大增加51%攻击的难度），挖矿的人越来越少，解决通货膨胀 提问：区块链的信息越来越大怎么办]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[VIM-Adventures前三关攻略]]></title>
      <url>%2F2017%2F04%2F25%2F%23%20VIM-Adventures%20%E5%89%8D%E4%B8%89%E5%85%B3%E6%94%BB%E7%95%A5%2F</url>
      <content type="text"><![CDATA[VIM-Adventures 前三关攻略 传送门：https://vim-adventures.com/VIM-Adventures免费的有三关，从第四关开始要$25，不过前三关还是很好玩的，也能对一些常用的ＶＩＭ的键有所熟悉 第一关： 相当简单，只是用hjkl键控制上下左右而已 h 左 j下 k上 l右 第二关： 主要使用vim的光标记忆操作。主要就是在上一行光标所在位置，到下一行 也是同样的位置，如果下一行比较光标将停留在其末尾。 第三关： 学到了Ｗ Ｂ Ｘ Ｅ的作用。 Ｂ是 Ｗ是 Ｅ是 Ｘ是删除光标所在的字符 小技巧，可以不断地按Ｗ Ｅ变可以走过限时３０Ｓ的那关（这就很舒服）获得Ｘ删除完红色的字母以后，便可以拿到钥匙，拿到钥匙以后，回到第一关被石头包围的宝箱那边，走到“！”所在的位置，然后按shift+b即可（因为在这个游戏中不能直接使用大写） 附全部地图：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[实验楼，挑战：备份日志]]></title>
      <url>%2F2017%2F04%2F09%2F%E6%8C%91%E6%88%98%EF%BC%9A%E5%A4%87%E4%BB%BD%E6%97%A5%E5%BF%97%2F</url>
      <content type="text"><![CDATA[备份日志 小明是一个服务器管理员，他需要每天备份论坛数据（这里我们用日志替代），备份当天的日志并删除之前的日志。而且备份之后文件名是年-月-日的格式。alternatives.log在/var/log/下面。 目标 删除以前的备份每天凌晨3点定时备份alternatives.log到/home/shiyanlou/tmp/目录命名为年-月-日提示 datecrontabcp(备份)用一条命令写在crontab里面即可，不用写脚本注：如果fail没有任何提示信息，请刷新一下页面 121 crontab -e2 0 3 * * * rm -fr /home/shiyanlou/tmp &amp;&amp; mkdir -p /home/shiyanlou/tmp &amp;&amp; cp /var/log/alternatives.log /]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux下软件安装]]></title>
      <url>%2F2017%2F04%2F09%2Flinux%E4%B8%8B%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%2F</url>
      <content type="text"><![CDATA[Linux下软件安装 linux平台下软件安装主要有以下三种方式： 在线安装 从磁盘安装deb软件包 从二进制软件包安装 从源代码编译安装 工具 说明 install 其后加上软件包名，用于安装一个软件包 update 从软件源镜像服务器上下载/更新用于更新本地软件源的软件包列表 upgrade 升级本地可更新的全部软件包，但存在依赖问题时将不会升级，通常会在更新之前执行一次update dist-upgrade 解决依赖关系并升级(存在一定危险性) remove 移除已安装的软件包，包括与被移除软件包有依赖关系的软件包，但不包含软件包的配置文件 autoremove 移除之前被其他软件包依赖，但现在不再被使用的软件包 purge 与remove相同，但会完全移除软件包，包含其配置文件 clean 移除下载到本地的已经安装的软件包，默认保存在/var/cache/apt/archives/ autoclean 移除已安装的软件的旧版本软件包 参数 说明 -y 自动回应是否安装软件包的选项，在一些自动化安装脚本中使用这个参数将十分有用 -s 模拟安装 -q 静默安装方式，指定多个q或者-q=#,#表示数字，用于设定静默级别，这在你不想要在安装软件包时屏幕输出过多时很有用 -f 修复损坏的依赖关系 -d 只下载不安装 –reinstall 重新安装已经安装但可能存在问题的软件包 –install-suggests 同时安装APT给出的建议安装的软件包 使用APT 1 2 3 使用dpkg dpkg是debian的软件包管理器基础，与prm十分相似，同样被用于安装、卸载、供给.deb软件包相关基础 dpkg 本身是一个底层的工具。上层的工具，像是 APT，被用于从远程获取软件包以及处理复杂的软件包关系。”dpkg”是”Debian Package”的简写。 dpkg常用参数介绍： 参数 说明 -i 安装指定deb包 -R 后面加上目录名，用于安装该目录下的所有deb安装包 -r remove，移除某个已安装的软件包 -I 显示deb包文件的信息 -s 显示已安装软件的信息 -S 搜索已安装的软件包 -L 显示已安装软件包的目录信息 详细细节，请参看实验楼]]></content>
    </entry>

    
    <entry>
      <title></title>
      <url>%2F2017%2F04%2F09%2Flinux%E4%B8%8Bsort%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[linux下cut命令详解]]></title>
      <url>%2F2017%2F04%2F07%2Fcut%20%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[cut是一个选取命令，就是将一段数据经过分析，取出指定的数据。值得注意的是，cut是针对“行”进行分析的，而不是像数据挖掘那样进行对数据的分析 语法格式： cut [-bn] [file] 或 cut [-c] [file] 或 cut [-df] [file] 必须指定-b -c 或者-f标志之一 主要参数-b 以字节位单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n标志-c 以字符位单位进行分割 cut 命令主要接受三个定位方法： 字节(bytes), 用选项 -b 字符(characters), 用选项 -c 域(fields),用选项-f值得注意的是，-b-c-f 后面可以加一个数字，如cut -c 8- 的意思就是,按照字符分割，从第八个字符开始！]]></content>
    </entry>

    
    <entry>
      <title></title>
      <url>%2F2017%2F04%2F05%2F%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[linux的学习]]></title>
      <url>%2F2017%2F03%2F15%2Flinux%E5%AD%A6%E4%B9%A0%2F</url>
      <content type="text"><![CDATA[linux的学习是不可以缺少的！ 使用zip打包文件夹 123zip -r -q -o chen.zip /home/chendu -h chen.zipfile chen.zip 上述第一条命令 -r 表示打包包含子目录的全部内容 -q 参数表示为安静模式，即不向屏幕输出信息 -o 表示输出文件，后面紧跟打包输出的文件名 zip： 打包 ：zip something.zip something （目录请加-r参数） 解包：unzip something 指定路径：-d 参数 tar： 打包：tar -zcvf something.tar something 解包：tar -zxvf something.tar 指定路径：-C 参数]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[关于 ']+href=["\'](.*?)["\']' 的解释]]></title>
      <url>%2F2017%2F02%2F28%2F%E5%85%B3%E4%BA%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[关于’]+href=“\’[“\’]’的解释 ‘]+href=“\’[“\’]’ [] 表示匹配其中的任意字符 ^&gt; 表示除了 &gt; 的字符 [“\’] 表示” \ ‘ 三个字符出现其中的任意一个 (.?)中 . 可以匹配除\n外的任意字符 表示前面字符任意多个 ？匹配前面的子表达式零次或一次]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hello_my_blog]]></title>
      <url>%2F2017%2F02%2F28%2Fhello-my-blog%2F</url>
      <content type="text"><![CDATA[这是我的第一个个人博客. 因为所学知识不多，所以暂时只能依靠hexo来搭建啦！现在还有很多不完善的地方，以后再花时间去折腾现在想着先把这两天折腾博客的坑记下来]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[在hexo搭建个人博客]]></title>
      <url>%2F2017%2F02%2F28%2F%E5%9C%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[心血来潮想做一个自己的博客来记录生活，以及把想记录的东西都有一个地方可以记录下来，于是就有了这样的一个个人博客，域名目前用着github的。我的hexo版本是3.2.2。我是在linux下进行开发的。 首先是环境配置１、安装NODE 安装NODE需要npm。而怎么安装npm呢？ 可以百度、geogle，这里就不在赘述。 ２、安装git 可以 `sudo apt-get install git` ３、申请github 这个没什么好说的 接下来就是安装hexo了可以使用以下命令： `sudo npm install hexo -g` 接下来，进入博客所在的目录`hexo init` `hexo generate` 然后 `hexo server` 最后一步是启动本地服务，进行文章预览调试：浏览器中输入 (http://localhost:4000) 下一步，配置github(1)建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法 然后建立关联 (2)修改_congif.yml文件 在终端的博客存储位置中，输入 vim 修改_congif 拉到最后，修改如下 1234deploy:type: gitrepository: (https://github.com/leopardpan/leopardpan.github.io.git) branch: master (ps.上面的repository后面，如果像上文一样，则以后每一次更新文章的时候，都要输入 github的账号密码，让人很不爽。怎么办呢？你也可以用ssh，这样就不用每次都输入密码啦。具体请百度) (3)执行下面的命令部署git `npm install hexo-deploy-git --save` (4)再来一个hexo deploy 到这里就完成了啊，就搭建好了一个简单的博客。当然，在这里只写到了比较理想化的情况，自己弄得时候要折腾多久之后自己去干了之后才会知道。后文附上我自己做的时候遇到的坑吧。。]]></content>
    </entry>

    
  
  
</search>
